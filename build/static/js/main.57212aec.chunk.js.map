{"version":3,"sources":["BusinessResults.js","Profile.js","App.js","reportWebVitals.js","index.js"],"names":["BusinessResults","props","businesses","starredItems","starredVar","isAuthenticated","useAuth0","map","b","i","onClick","businessId","style","isStarred","fontWeight","name","address","categories","reduce","acc","c","averageStars","Profile","user","padding","src","picture","alt","width","App","useState","selectedCategory","setSelectedCategory","loginWithRedirect","logout","GET_BUSINESSES_QUERY","gql","useQuery","variables","loading","error","data","refetch","returnTo","window","location","origin","value","onChange","event","target","type","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","makeVar","AppWithApollo","getAccessTokenSilently","httpLink","createHttpLink","uri","process","authLink","setContext","_","headers","undefined","accessToken","authorization","client","ApolloClient","link","concat","cache","InMemoryCache","typePolicies","Business","fields","read","readField","includes","ApolloProvider","ReactDOM","render","StrictMode","domain","clientId","redirectUri","audience","document","getElementById"],"mappings":"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","file":"static/js/main.57212aec.chunk.js","sourcesContent":["import { starredVar } from \"./index\";\r\nimport {useAuth0} from \"@auth0/auth0-react\"\r\n\r\nfunction BusinessResults(props) {\r\n  const { businesses } = props;\r\n  const starredItems = starredVar();\r\n  const {isAuthenticated} = useAuth0();\r\n\r\n  return (\r\n    <div>\r\n      <h2>Results</h2>\r\n      <table>\r\n        <thead>\r\n          <tr>\r\n            <th></th>\r\n            <th>Name</th>\r\n            <th>Address</th>\r\n            <th>Category</th>\r\n            {isAuthenticated ? <th>Average Stars</th> : null}\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {businesses.map((b, i) => (\r\n            <tr key={i}>\r\n              <td>\r\n                <button\r\n                  onClick={() => starredVar([...starredItems, b.businessId])}\r\n                >\r\n                  Star\r\n                </button>\r\n              </td>\r\n              <td style={b.isStarred ? { fontWeight: \"bold\" } : null}>\r\n                {b.name}\r\n              </td>\r\n              <td>{b.address}</td>\r\n              <td>\r\n                {b.categories.reduce(\r\n                  (acc, c, i) => acc + (i === 0 ? \" \" : \", \") + c.name,\r\n                  \"\"\r\n                )}\r\n              </td>\r\n              {isAuthenticated ? <td>{b.averageStars}</td> : null}\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default BusinessResults;\r\n","import { useAuth0 } from \"@auth0/auth0-react\";\r\n\r\nconst Profile = () => {\r\n  const { user, isAuthenticated } = useAuth0();\r\n  return (\r\n    isAuthenticated && (\r\n      <div style={{ padding: \"10px\" }}>\r\n        <img src={user.picture} alt=\"User avatar\" style={{ width: \"40px\" }} />\r\n        <strong>{user.name}</strong>\r\n      </div>\r\n    )\r\n  );\r\n};\r\n\r\nexport default Profile;\r\n","import React, { useState } from \"react\";\r\nimport BusinessResults from \"./BusinessResults\";\r\nimport { gql, useQuery } from \"@apollo/client\";\r\nimport { useAuth0 } from \"@auth0/auth0-react\";\r\nimport Profile from \"./Profile\";\r\n\r\nfunction App() {\r\n  const [selectedCategory, setSelectedCategory] = useState(\"\");\r\n  const { loginWithRedirect, logout, isAuthenticated } = useAuth0();\r\n\r\n  const GET_BUSINESSES_QUERY = gql`\r\n  query BusinessesByCategory($selectedCategory: String!) {\r\n    businesses(where: { categories: { name_CONTAINS: $selectedCategory } }) {\r\n      businessId\r\n      name\r\n      address\r\n      categories {\r\n        name\r\n      }\r\n      ${isAuthenticated ? \"averageStars\" : \"\"}\r\n      isStarred @client\r\n    }\r\n  }\r\n`;\r\n\r\n  const { loading, error, data, refetch } = useQuery(GET_BUSINESSES_QUERY, {\r\n    variables: { selectedCategory },\r\n  });\r\n\r\n  if (error) return <p>Error</p>;\r\n  if (loading) return <p>Loading...</p>;\r\n\r\n  return (\r\n    <div>\r\n      {!isAuthenticated && (\r\n        <button onClick={() => loginWithRedirect()}>Log In</button>\r\n      )}\r\n      {isAuthenticated && (\r\n        <button onClick={() => logout({ returnTo: window.location.origin })}>\r\n          Log Out\r\n        </button>\r\n      )}\r\n      <Profile />\r\n      <h1>Business Search</h1>\r\n      <form>\r\n        <label>\r\n          Select Business Category:\r\n          <select\r\n            value={selectedCategory}\r\n            onChange={(event) => setSelectedCategory(event.target.value)}\r\n          >\r\n            <option value=\"\">All</option>\r\n            <option value=\"Library\">Library</option>\r\n            <option value=\"Restaurant\">Restaurant</option>\r\n            <option value=\"Car Wash\">Car Wash</option>\r\n          </select>\r\n        </label>\r\n        <input type=\"button\" value=\"Refetch\" onClick={() => refetch()} />\r\n      </form>\r\n\r\n      <BusinessResults businesses={data.businesses} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\nimport {\r\n  ApolloClient,\r\n  InMemoryCache,\r\n  ApolloProvider,\r\n  makeVar,\r\n  createHttpLink,\r\n} from \"@apollo/client\";\r\nimport { setContext } from \"@apollo/client/link/context\";\r\nimport { Auth0Provider, useAuth0 } from \"@auth0/auth0-react\";\r\n\r\nexport const starredVar = makeVar([]);\r\n\r\nconst AppWithApollo = () => {\r\n  const { getAccessTokenSilently, isAuthenticated } = useAuth0();\r\n\r\n  const httpLink = createHttpLink({\r\n    uri: process.env.REACT_APP_GRAPHQL_URI,\r\n  });\r\n\r\n  const authLink = setContext(async (_, { headers }) => {\r\n    // Only try to fetch access token if user is authenticated\r\n    const accessToken = isAuthenticated\r\n      ? await getAccessTokenSilently()\r\n      : undefined;\r\n    if (accessToken) {\r\n      return {\r\n        headers: {\r\n          ...headers,\r\n          authorization: accessToken ? `Bearer ${accessToken}` : \"\",\r\n        },\r\n      };\r\n    } else {\r\n      return {\r\n        headers: {\r\n          ...headers,\r\n          // We could set additional headers here or a \"default\" authorization header if needed\r\n        },\r\n      };\r\n    }\r\n  });\r\n\r\n  const client = new ApolloClient({\r\n    link: authLink.concat(httpLink),\r\n    cache: new InMemoryCache({\r\n      typePolicies: {\r\n        Business: {\r\n          fields: {\r\n            isStarred: {\r\n              read(_, { readField }) {\r\n                return starredVar().includes(readField(\"businessId\"));\r\n              },\r\n            },\r\n          },\r\n        },\r\n      },\r\n    }),\r\n  });\r\n\r\n  return (\r\n    <ApolloProvider client={client}>\r\n      <App />\r\n    </ApolloProvider>\r\n  );\r\n};\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Auth0Provider\r\n      domain={process.env.REACT_APP_AUTH0_DOMAIN}\r\n      clientId={process.env.REACT_APP_AUTH0_CLIENT_ID}\r\n      redirectUri={window.location.origin}\r\n      audience={process.env.REACT_APP_AUTH0_AUDIENCE}\r\n    >\r\n      <AppWithApollo />\r\n    </Auth0Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}